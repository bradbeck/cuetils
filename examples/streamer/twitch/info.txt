$ _cp twitch/info.cue -p user
pipe(beg): user 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(meta) ucfg
  ++PP: @pipeline(meta) ucfg
    TASK: @task(api.Call) get
    TASK: @task(os.Stdout) print
pipe(beg): ucfg 
  PIPE: @pipeline(meta) 
    TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  PIPE: @pipeline(load,auth) secrets.tLoad
  ++PP: @pipeline(load,auth) secrets.tLoad
pipe(beg): secrets.tLoad 
pipe(end): ucfg 
  PIPE: @pipeline(load,auth) 
pipe(end): user 
Error: task failed: Error: secrets.tLoad.cfg: structural cycle
... or ...
Error: task failed: Error: secrets.tLoad.cfg.r: structural cycle


$ _cp twitch/info.cue -p user
pipe(beg): user 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(meta) ucfg
  ++PP: @pipeline(meta) ucfg
    TASK: @task(api.Call) get
    TASK: @task(os.Stdout) print
pipe(beg): ucfg 
  PIPE: @pipeline(meta) 
    TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  PIPE: @pipeline(load,auth) secrets.tLoad
  ++PP: @pipeline(load,auth) secrets.tLoad
pipe(beg): secrets.tLoad 
  PIPE: @pipeline(load,auth) 
  PIPE: @pipeline(meta,auth) cfg
  ++PP: @pipeline(meta,auth) cfg
    TASK: @task(os.ReadFile) files.token_txt
  PIPE: @pipeline(meta) 
pipe(beg): cfg 
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) vars.r
  ++PP: @pipeline(reporoot) vars.r
    TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
    TASK: @task(os.Getenv) secrets.env.TWITCH_SECRET_KEY
  PIPE: @pipeline(meta,auth) 
pipe(beg): vars.r RepoRoot
  PIPE: @pipeline(reporoot) 
    TASK: @task(os.Exec) do
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) 
pipe(end): vars.r RepoRoot
  PIPE: @pipeline(meta,auth) 
pipe(end): cfg 
  PIPE: @pipeline(load,auth) 
  PIPE: @pipeline(load,auth) 
pipe(end): secrets.tLoad 
  PIPE: @pipeline(meta) 
pipe(end): ucfg 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(user) 
696471067
pipe(end): user 
===============


$ _cp twitch/info.cue -p user
pipe(beg): user 
pipe(beg): ucfg 
pipe(beg): secrets.tLoad 
pipe(end): ucfg 
pipe(end): user 
Error: task failed: Error: secrets.tLoad: structural cycle


$ _cp twitch/info.cue -p user
pipe(beg): user 
pipe(beg): ucfg 
pipe(beg): secrets.tLoad 
pipe(end): ucfg 
pipe(end): user 
Error: task failed: Error: secrets.tLoad.cfg: structural cycle


$ _cp twitch/info.cue -p user
pipe(beg): user 
pipe(beg): ucfg 
pipe(beg): secrets.tLoad 
pipe(beg): cfg 
pipe(beg): vars.r RepoRoot
pipe(end): vars.r RepoRoot
pipe(end): cfg 
pipe(end): secrets.tLoad 
pipe(end): ucfg 
696471067
pipe(end): user 


=======


$ _cp twitch/info.cue -p user
pipe(beg): user 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(meta) ucfg
  TASK: @task(api.Call) get
  TASK: @task(os.Stdout) print
pipe(beg): ucfg 
  PIPE: @pipeline(meta) 
  TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  PIPE: @pipeline(load,auth) secrets.tLoad
pipe(beg): secrets.tLoad 
  PIPE: @pipeline(load,auth) 
  PIPE: @pipeline(meta,auth) cfg
  TASK: @task(os.ReadFile) files.token_txt
pipe(beg): cfg 
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) vars.r
  TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  TASK: @task(os.Getenv) secrets.env.TWITCH_SECRET_KEY
  PIPE: @pipeline(meta,auth) 
pipe(beg): vars.r RepoRoot
  PIPE: @pipeline(reporoot) 
  TASK: @task(os.Exec) do
pipe(end): ucfg 
  PIPE: @pipeline(meta,auth) 
pipe(end): user 
Error: task failed: Error: secrets.tLoad: structural cycle


$ _cp twitch/info.cue -p user
pipe(beg): user 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(meta) ucfg
  TASK: @task(api.Call) get
  TASK: @task(os.Stdout) print
pipe(beg): ucfg 
  PIPE: @pipeline(meta) 
  TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  PIPE: @pipeline(load,auth) secrets.tLoad
pipe(beg): secrets.tLoad 
  PIPE: @pipeline(load,auth) 
  PIPE: @pipeline(meta,auth) cfg
  TASK: @task(os.ReadFile) files.token_txt
pipe(beg): cfg 
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) vars.r
  PIPE: @pipeline(meta) 
  TASK: @task(os.Getenv) secrets.env.TWITCH_CLIENT_ID
  TASK: @task(os.Getenv) secrets.env.TWITCH_SECRET_KEY
pipe(beg): vars.r RepoRoot
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) 
  TASK: @task(os.Exec) do
  PIPE: @pipeline(meta,auth) 
  PIPE: @pipeline(reporoot) 
pipe(end): vars.r RepoRoot
  PIPE: @pipeline(meta,auth) 
pipe(end): cfg 
  PIPE: @pipeline(load,auth) 
  PIPE: @pipeline(load,auth) 
pipe(end): secrets.tLoad 
  PIPE: @pipeline(meta) 
pipe(end): ucfg 
  PIPE: @pipeline(user) 
  PIPE: @pipeline(user) 
696471067
pipe(end): user 
